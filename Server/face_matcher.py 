# face_matcher.py
import face_recognition
import os
import sys
import json
import numpy as np

def load_and_encode_images(folder_path):
    encodings = []
    names = []
    for file_name in os.listdir(folder_path):
        img_path = os.path.join(folder_path, file_name)
        image = face_recognition.load_image_file(img_path)
        encoding = face_recognition.face_encodings(image)
        if encoding:
            encodings.append(encoding[0])
            names.append(file_name)
    return encodings, names

def find_best_matches(folderA_encodings, folderA_names, folderB_encodings, folderB_names):
    matches = []
    for i, b_encoding in enumerate(folderB_encodings):
        distances = face_recognition.face_distance(folderA_encodings, b_encoding)
        best_match_index = np.argmin(distances)
        best_match_name = folderA_names[best_match_index]
        match_distance = distances[best_match_index]
        matches.append({
            "found_child": folderB_names[i],
            "matched_lost_child": best_match_name,
            "match_percentage": round((1 - match_distance) * 100, 2)
        })
    return matches

# Define folders
folderA_path = 'uploads'   # First folder containing lost children images
folderB_path = 'upload2'   # Second folder containing found children images

# Load and encode images
folderA_encodings, folderA_names = load_and_encode_images(folderA_path)
folderB_encodings, folderB_names = load_and_encode_images(folderB_path)
const { exec } = require('child_process');

// ----------------------------- Match Children API -----------------------------
app.get('/match-children', (req, res) => {
  // Run the Python script to match children in uploads and upload2
  exec('python3 face_matcher.py', (error, stdout, stderr) => {
    if (error) {
      console.error(`Error: ${error.message}`);
      return res.status(500).json({ message: 'Error running Python script', error: error.message });
    }
    if (stderr) {
      console.error(`Stderr: ${stderr}`);
      return res.status(500).json({ message: 'Python script error', error: stderr });
    }

    // Parse and send the JSON output from the Python script
    try {
      const matches = JSON.parse(stdout);
      res.status(200).json(matches);
    } catch (parseError) {
      console.error('Error parsing JSON:', parseError.message);
      res.status(500).json({ message: 'Error parsing JSON output', error: parseError.message });
    }
  });
});


# Find matches and output as JSON
matches = find_best_matches(folderA_encodings, folderA_names, folderB_encodings, folderB_names)
print(json.dumps(matches))
